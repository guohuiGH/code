#include<iostream>
#include<cstdio>
#include<stdlib.h>
#include<set>
#include<map>
#include<vector>

using namespace std;
set<int>setMap;
struct Node {
	int left, right;
	Node* leftChild;
	Node* rightChild;
	int lazyTag;
};
set<int>res;

void BuildSegmentTree(Node *root,int left, int right) {
	root->left = left;
	root->right = right;
	root->lazyTag = -1;
	if (left + 1 == right) {
		root->leftChild = NULL;
		root->rightChild = NULL;
		return;
		//root->lazyTag = -1;
	}
	int mid = (left+right)/2;
	Node *leftChild = (Node *)malloc(sizeof(Node));
	root->leftChild = leftChild;
	Node *rightChild = (Node *)malloc(sizeof(Node));
	root->rightChild = rightChild;
	BuildSegmentTree(leftChild, left, mid);
	BuildSegmentTree(rightChild, mid, right);
	

}

void ModifySegmentTree(Node *root, int left, int right, int result) {
	if (root->left == left && root->right == right) {
		root->lazyTag = result;
	} else {
		if (root->lazyTag != -1) {
			root->leftChild->lazyTag = root->lazyTag;
			root->rightChild->lazyTag = root->lazyTag;
		}
		root->lazyTag = -1;
		int mid = (left + right)/2;
		if (root->leftChild->right >= right)
			ModifySegmentTree(root->leftChild, left, right, result);
		else if (root->rightChild->left <= left)
			ModifySegmentTree(root->rightChild, left, right, result);
		else {
			ModifySegmentTree(root->leftChild, left, root->leftChild->right, result);
			ModifySegmentTree(root->rightChild, root->rightChild->left, right, result);
		}
	}
}

void SearchSegmentTree (Node * root){
	if (root->lazyTag != -1) {
		res.insert(root->lazyTag);
		return;
	}
	if (root->left + 1 == root->right)
		return;
	SearchSegmentTree(root->leftChild);
	SearchSegmentTree(root->rightChild);

}

int main () {
	int n;
	int l;
	scanf("%d %d", &n, &l);
	vector<int>ve;
	map<int, int>ma;
	for (int i = 0; i < n; i++) {
		int left, right;
		scanf ("%d %d", &left, &right);
		setMap.insert(left);
		setMap.insert(right);
		ve.push_back(left);
		ve.push_back(right);
	}
	if (n == 0 || l == 0) {
		printf("0\n");
		return 1;
	}
	int size = setMap.size();
	Node *root = (Node*)malloc(sizeof(Node));
	//root->left = 0;
	//root->right = size - 1;
	BuildSegmentTree(root, 0, size-1);
	set<int>::iterator it;
	int i = 0;
	for (it = setMap.begin(); it != setMap.end(); it++) {
		ma[*it] = i;
		i++;
	}
	int j = 0;
	for (i = 0; i < 2*n; i++) {
		int left = ma[ve[i]];
		int right = ma[ve[i+1]];
		i++;
		ModifySegmentTree(root, left, right, j);
		j++;
	}
	SearchSegmentTree(root);
	printf("%d\n", res.size());
}

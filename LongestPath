// the longest path 
#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>

using namespace std;
#define LENGTH 100005


vector<int>tree[LENGTH];
int MAX = 0;
int first[LENGTH] = {0};
int second[LENGTH] = {0};
int color[LENGTH] = {0};
queue<int>qu;

int max (int a, int b) {
	return a > b ? a : b;
}

int maxLength (int root) {
	int size = tree[root].size();
	color[root] = 1;
	if (size == 1 && color[tree[root][0]]) {
		first[root] = 1;
		return 1;
	}
	
	int one = 0, two = 0;
	for (int i = 0; i < size; i++) {
		int next = tree[root][i];
		if (!color[next]) {
			int len = 0;
			if (!first[next])
				len = maxLength(next);
			else
				len = first[next];
		
			if (one < len) {
				two = one;
				one  = len;
				
			}
			else {
				if (two < len) {
					two = len;
				}
			}
		}
	}
	one++;
	two++;
	first[root] = one;
	second[root] = two;
	return one;

}

int main () {
	
	int size;
	scanf("%d",&size);
	for (int i = 0; i < size-1; i++) {
		int node1, node2;
		scanf("%d %d",&node1, &node2);
		tree[node1].push_back(node2);
		tree[node2].push_back(node1);
	}
	int i = 1;
	while (!tree[i].size()) {
		i++;
	}
	maxLength(i);

	i = 1;
	int max = 0;
	while (first[i]) {
		int temp = first[i] + second[i];
		if (max < temp)
			max = temp;
		i++;
	}
	printf("%d\n", max - 2);
	return 0;
}
